<?php
define('SMS_PROVIDER_HOURLY_THRESHOLD', 3);

/**
 * Implementation of hook_menu().
 */
function sms_reminder_menu() {
  $items = array();

  $items['admin/settings/sms-reminder'] = array(
    'title' => t('SMS Reminder'),
    'description' => t('Configure SMS reminder service.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sms_reminder_admin'),
    'access arguments' => array('administer site configuration'),
   );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function sms_reminder_perm() {
}

/**
 * SMS reminder admin settings form.
 */
function sms_reminder_admin() {
	$form = array();
	
	// Global settings
	$form['global_settings'] = array(
		'#type' => 'fieldset',
		'#title' => t('Global settings'),
	);
	
	// Hourly threshold
	$form['global_settings']['sms_reminder_hourly_threshold'] = array(
		'#type' => 'textfield',
		'#title' => t('Hourly threshold'),
		'#default_value' => variable_get('sms_reminder_hourly_threshold', SMS_PROVIDER_HOURLY_THRESHOLD),
		'#size' => 5,
		'#maxlength' => 4,
		'#description' => t('Enter the number of messages a user is allowed to send from a specific IP-address during one hour.'),
	);
	
	// Description
	$form['global_settings']['sms_reminder_description'] = array(
		'#type' => 'textarea',
		'#title' => t('Description'),
		'#default_value' => variable_get('sms_reminder_description', ''),
		'#description' => t('Text to show above the remind me form.'),
	);
	
	// Thank you
	$form['global_settings']['sms_reminder_thank_you'] = array(
		'#type' => 'textarea',
		'#title' => t('Thank you messsage'),
		'#default_value' => variable_get('sms_reminder_thank_you', ''),
		'#description' => t('Text to show when a user have submitted the form.'),
	);
	
	// Content types
	foreach(node_get_types('types') as $key => $value) {
		$types[$key] = $value->name;
	}
	
	$form['global_settings']['sms_reminder_content_types'] = array(
		'#type' => 'checkboxes',
		'#title' => t('Enabled content types'),
		'#default_value' => variable_get('sms_reminder_content_types', array()),
		'#options' => $types,
		'#description' => t('Check the content types for which to enable SMS reminder'),
	);
	
	// Providers
	$form['providers'] = array(
		'#type' => 'fieldset',
		'#title' => t('Providers'),
		'#description' => t('Provider specific settings for installed providers.'),
	);
	
	// Get list of providers
	$providers = _sms_reminder_get_providers();
	
	// Add provider settings
	foreach($providers as $key => $value) {
		module_load_include('inc', 'sms_reminder', "providers/{$key}");
		$form['providers'][] = (array)module_invoke('sms_reminder', "{$key}_settings");
	}
	
	return system_settings_form($form);
}

/**
 * Implementation of hook_form_alter().
 */
function sms_reminder_form_alter(&$form, $form_state, $form_id) {
	// Get enabled content types
	$content_types = variable_get('sms_reminder_content_types', array());
	
	// Get list of providers
	$providers = _sms_reminder_get_providers(TRUE);
	
	// Alter form	
	if(!empty($providers) && isset($form['#node']) && in_array($form['#node']->type, $content_types) && $form['#node']->type .'_node_form' == $form_id) {
		
		// Load SMS reminder data
		$record = _sms_reminder_get_record($form['#node']->nid, $form['#node']->vid);
		if(!$record) {
			$record = array(
				'srid' => NULL,
				'message' => NULL,
				'event_time' => time(),
				'provider' => NULL,
			);
		}
		
		// Fieldset
		$form['sms_reminder'] = array(
			'#type' => 'fieldset',
			'#title' => t('SMS Reminder'),
			'#collapsible' => TRUE,
			'#collapsed' => TRUE,
		);
		
		// SMS reminder ID
		$form['sms_reminder']['srid'] = array(
			'#type' => 'hidden',
			'#default_value' => $record['srid'],
		);
		
		// Delete the SMS reminder
		if(!empty($record['srid'])) {
			$form['sms_reminder']['delete_sms_reminder'] = array(
				'#type' => 'checkbox',
				'#title' => t('Delete this SMS reminder'),
			);
		}
		
		// Message
		$form['sms_reminder']['message'] = array(
			'#type' => 'textarea',
			'#title' => t('Message'),
			'#default_value' => $record['message'],
			'#description' => t('Enter the message to be sent.'),
		);
		
		// Time
		$form['sms_reminder']['time'] = array(
			'#type' => 'textfield',
			'#title' => t('Event time'),
			'#default_value' => date('Y-m-d H:i', $record['event_time']),
			'#size' => 20,
			'#maxlength' => 16,
			'#description' => t('Enter the time this event takes place. Format: @format.', array('@format' => date('Y-m-d H:i'))),
		);
		
		// Provider
		$form['sms_reminder']['provider'] = array(
			'#type' => 'select',
			'#title' => t('Provider'),
			'#default_value' => $record['provider'],
			'#options' => $providers,
			'#description' => t('Choose the provider to use when sending messages.'),
		);
		
		// Add submit callback
		$form['#submit'][] = 'sms_reminder_form_submit';
	}
}

/**
 * Handle form submit.
 */
function sms_reminder_form_submit($form, &$form_state) {
	// Delete record
	if($form_state['values']['delete_sms_reminder'] == '1') {
		_sms_reminder_delete_record($form_state['values']['nid'], $form_state['values']['vid']);
		return;
	}
	
	// Assemble data object
	$data = (object)array(
		'nid' => $form_state['values']['nid'],
		'vid' => $form_state['values']['vid'],
		'message' => check_plain($form_state['values']['message']),
		'event_time' => strtotime($form_state['values']['time']),
		'provider' => $form_state['values']['provider'],
	);
	
	// Are we performing an update?
	$update = NULL;
	if(!empty($form_state['values']['srid'])) {
		$data->srid = $form_state['values']['srid'];
		$update = 'srid';
	}
	
	// Write new record	
	drupal_write_record('sms_reminder', $data, $update);
}

/**
 * Handle user form submit.
 */
function sms_reminder_user_form_submit($form, &$form_state) {
	// Get threshold variable
	$threshold = variable_get('sms_reminder_hourly_threshold', 3);
	
	// Check weather user is allowed to post
	if(flood_is_allowed('sms_reminder', $threshold)) {
		// Load reminder settings
		$ids = explode(',', $form_state['values']['sms_reminder']);
		$reminder = _sms_reminder_get_record($ids[0], $ids[1]);
		
		// Load include
		module_load_include('inc', 'sms_reminder', "providers/{$reminder['provider']}");
		
		// Invoke provider submit
		$status = module_invoke('sms_reminder', "{$reminder['provider']}_submit", $form, $form_state);
		
		if(strlen($status) > 0) {
			drupal_set_message(t('Your message could not be delivered. Please try again later.'), 'error');
		}
		else {
			flood_register_event('sms_reminder');
			drupal_set_message(variable_get('sms_reminder_thank_you', t('Thank you. The reminder will be sent at specifed time.')));
		}
	}
	else {
		drupal_set_message(t('You have reached your hourly threshold of @threshold for the SMS reminder service.', array('@threshold' => $threshold)), 'error');
	}
}

/**
 * Validate user form.
 */
function sms_reminder_user_form_validate($form, &$form_state) {
	// Load reminder settings
	$ids = explode(',', $form_state['values']['sms_reminder']);
	$reminder = _sms_reminder_get_record($ids[0], $ids[1]);
	
	// Load include
	module_load_include('inc', 'sms_reminder', "providers/{$reminder['provider']}");
	
	// Invoke provider validation
	module_invoke('sms_reminder', "{$reminder['provider']}_validate", $form, $form_state);
}

/**
 * Assemble the SMS reminder form.
 */
function sms_reminder_user_form() {
	$args = func_get_args();
	$reminder_settings = $args[1];

	// Form
	$form = array(
		'#id' => "sms-reminder-form",
		'#validate' => array('sms_reminder_user_form_validate'),
		'#submit' => array('sms_reminder_user_form_submit'),
	);
	
	// Fieldset
	$form['fieldset'] = array(
		'#type' => 'fieldset',
		'#title' => t('Remind me of this event'),
		'#collapsible' => TRUE,
		'#collapsed' => FALSE,
		'#description' => variable_get('sms_reminder_description', NULL),
	);
	
	// Reminder ID
	$form['sms_reminder'] = array(
		'#type' => 'hidden',
		'#value' => implode(',', array($reminder_settings['nid'], $reminder_settings['vid'])),
	);
	
	// Phone
	$form['fieldset']['phone'] = array(
		'#type' => 'textfield',
		'#title' => t('Phone'),
		'#size' => 20,
		'#maxlength' => 20,
		'#required' => TRUE,
		'#description' => t('Enter your cell phone number.'),
		'#weight' => 1,
	);
	
	// When
	$form['fieldset']['when'] = array(
		'#type' => 'select',
		'#title' => t('I want to be reminded'),
		'#options' => array(
			'three_days_before' => t('Three days before'),
			'day_before' => t('The day before'),
			'same_day' => t('Same day'),
			'now' => t('Now'),
		),
		'#description' => t('Select when you want to be reminded of this event.'),
		'#weight' => 2,
	);
	
	// Submit
	$form['fieldset']['form-submit'] = array(
		'#type' => 'submit',
		'#value' => t('Remind me'),
		'#weight' => 3,
	);
	
	return $form;
}

/**
 * Theme SMS reminder output.
 */
function theme_sms_reminder($sms_reminder) {
	return drupal_get_form('sms_reminder_user_form', $sms_reminder);
}

/**
 * Implementation of hook_nodeapi().
 */
function sms_reminder_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'view' :
    	if($page && $reminder = _sms_reminder_get_record($node->nid, $node->vid)) {
      	$node->content['sms_reminder']['#value'] = theme_sms_reminder($reminder);
      	$node->content['sms_reminder']['#weight'] = 1; 
      }
      break;
  }
}

/**
 * Implementation of hook_preprocess_node().
 */
function sms_reminder_preprocess_node(&$variables) {
	if(isset($variables['sms_reminder'])) {
		$variables['content'] .= theme_sms_reminder($variables['sms_reminder']);
	}
}

/*****************************************************************************
 * Private functions.
 ****************************************************************************/

/**
 * Load a SMS reminder record.
 */
function _sms_reminder_get_record($nid, $vid) {
	$result = db_query('SELECT * FROM {sms_reminder} WHERE nid = %d AND vid = %d', $nid, $vid);
	return db_fetch_array($result);
}

/**
 * Delete a SMS reminder record.
 */
function _sms_reminder_delete_record($nid, $vid) {
	return db_query('DELETE FROM {sms_reminder} WHERE nid = %d AND vid = %d', $nid, $vid);
}

/**
 * Get list of providers.
 */
function _sms_reminder_get_providers($only_enabled = FALSE) {
	$providers = array(
		'ballou' => 'Ballou',
		'ballou_http' => 'Ballou HTTP',
	);
	
	// Remove providers that aren't enabled
	if($only_enabled) {
		foreach($providers as $key => $value) {
			$enabled = variable_get("sms_reminder_{$key}_enabled", 0);
			if(!$enabled) {
				unset($providers[$key]);
			}
		}
	}
	
	return $providers;
}